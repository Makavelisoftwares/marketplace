// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum Role {
  CLIENT
  MODERATOR
  SUPERADMINISTRATOR
}

model User {
  id            String    @id @default(cuid())
  name          String?
  firstname     String?
  lastname      String?
  username      String?   @unique
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  password      String?
  verified      Boolean   @default(false)
  code          String?
  Session       Session[]
  Account       Account?

  Blocked Boolean @default(false)

  Role Role @default(CLIENT)

  // Post  Post[]
  // Likes Likes[]
  // Views Views[]

  // DisLikes   DisLikes[]
  // Following  Follow[]   @relation("following")
  // FollowedBy Follow[]   @relation("followedBy")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  id                       String  @id @default(cuid())
  userId                   String  @unique
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String? @db.Text
  access_token             String? @db.Text
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String? @db.Text
  session_state            String?
  refresh_token_expires_in Int?
  user                     User?   @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
}

// model Post {
//   id      String @id @default(cuid())
//   content String @db.Text

//   image String?
//   video String?
//   url   String? @db.Text
//   price String?

//   moderated Boolean @default(false)

//   category   Category @relation(fields: [categoryId], references: [id], onDelete: Cascade, onUpdate: Cascade)
//   categoryId String

//   user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
//   userId String

//   Likes    Likes[]
//   Views    Views[]
//   DisLikes DisLikes[]

//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt
// }

// model Follow {
//   id String @id @default(cuid())

//   follower   User   @relation(name: "following", fields: [followerId], references: [id], onDelete: Cascade, onUpdate: Cascade)
//   followerId String

//   following   User   @relation(name: "followedBy", fields: [followingId], references: [id], onDelete: Cascade, onUpdate: Cascade)
//   followingId String

//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt
// }

// model Category {
//   id   String @id @default(cuid())
//   name String

//   Post Post[]

//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt
// }

// model Likes {
//   id String @id @default(cuid())

//   user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
//   userId String

//   post   Post   @relation(fields: [postId], references: [id], onDelete: Cascade, onUpdate: Cascade)
//   postId String

//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt
// }

// model DisLikes {
//   id String @id @default(cuid())

//   user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
//   userId String

//   post   Post   @relation(fields: [postId], references: [id], onDelete: Cascade, onUpdate: Cascade)
//   postId String

//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt
// }

// model Views {
//   id String @id @default(cuid())

//   user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
//   userId String

//   post   Post   @relation(fields: [postId], references: [id], onDelete: Cascade, onUpdate: Cascade)
//   postId String

//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt
// }
